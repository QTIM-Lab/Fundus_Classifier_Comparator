{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to OPTIMEyes Open Source Ophthalmology Annotation App QTIM GitHub . Use Sign Up Log In MonaiLabel app Classify App Compare App Flicker App Slider App","title":"Use"},{"location":"#welcome-to-optimeyes","text":"Open Source Ophthalmology Annotation App QTIM GitHub .","title":"Welcome to OPTIMEyes"},{"location":"#use","text":"Sign Up Log In MonaiLabel app Classify App Compare App Flicker App Slider App","title":"Use"},{"location":"instructions_for_setup/","text":"Instructions for setup Create an environment variables file. Do not check .env into git. cp .env_sample .env Launch Start: ./start.sh Stop: ./stop.sh Interact Relaunch: docker compose up -d Logs: docker compose logs -f # everything docker compose logs -f flask docker compose logs -f couchdb docker compose logs -f monailabel # If you need to rebuild just one # docker compose build flask # docker compose build couchdb # docker compose build monailabel","title":"Instructions for setup"},{"location":"instructions_for_setup/#instructions-for-setup","text":"Create an environment variables file. Do not check .env into git. cp .env_sample .env Launch Start: ./start.sh Stop: ./stop.sh","title":"Instructions for setup"},{"location":"instructions_for_setup/#interact","text":"Relaunch: docker compose up -d Logs: docker compose logs -f # everything docker compose logs -f flask docker compose logs -f couchdb docker compose logs -f monailabel # If you need to rebuild just one # docker compose build flask # docker compose build couchdb # docker compose build monailabel","title":"Interact"},{"location":"interactive_shell_for_flask/","text":"Interactive shell for flask docker compose exec -it flask bash flask shell then: from OPTIMEyes.auth_blueprint import load_user from OPTIMEyes.db import get_server # Get the database instance couch_server = get_server() db = couch_server['image_comparator'] user = load_user('user_bbearce') user.set_password(\"password\") user.save(db) Download Annotations: from OPTIMEyes.routes_blueprint import downloadAnnotations App=\"monaiSegmentation\" user = 'bbearce' list_name =f'test_data-monaiSegmentation-0' task_id = f\"{user}-{list_name}\" zip_path = f\"TMP/{user}-{list_name}.zip\" downloadAnnotations(App, task_id, cli=True, zip_path=zip_path) Change Passwords: from OPTIMEyes.auth_blueprint import load_user from OPTIMEyes.db import get_server # Get the database instance couch_server = get_server() db = couch_server['image_comparator'] user = load_user('user_bbearce') user.set_password(\"password\") user.save(db) from OPTIMEyes.auth_blueprint import load_user from OPTIMEyes.db import get_server # Get the database instance couch_server = get_server() db = couch_server['image_comparator'] user = load_user('') user.set_password(\"\") user.save(db) user_pass=[ ('guest', 'testtest') ] for u, p in user_pass: print(u) print(p) for u, p in user_pass: user = load_user(f'user_{u}') print(f'{u} {p}') user.set_password(p) user.save(db) # head -c 16 /dev/urandom | base64","title":"Interactive shell for flask"},{"location":"interactive_shell_for_flask/#interactive-shell-for-flask","text":"docker compose exec -it flask bash flask shell then: from OPTIMEyes.auth_blueprint import load_user from OPTIMEyes.db import get_server # Get the database instance couch_server = get_server() db = couch_server['image_comparator'] user = load_user('user_bbearce') user.set_password(\"password\") user.save(db) Download Annotations: from OPTIMEyes.routes_blueprint import downloadAnnotations App=\"monaiSegmentation\" user = 'bbearce' list_name =f'test_data-monaiSegmentation-0' task_id = f\"{user}-{list_name}\" zip_path = f\"TMP/{user}-{list_name}.zip\" downloadAnnotations(App, task_id, cli=True, zip_path=zip_path) Change Passwords: from OPTIMEyes.auth_blueprint import load_user from OPTIMEyes.db import get_server # Get the database instance couch_server = get_server() db = couch_server['image_comparator'] user = load_user('user_bbearce') user.set_password(\"password\") user.save(db) from OPTIMEyes.auth_blueprint import load_user from OPTIMEyes.db import get_server # Get the database instance couch_server = get_server() db = couch_server['image_comparator'] user = load_user('') user.set_password(\"\") user.save(db) user_pass=[ ('guest', 'testtest') ] for u, p in user_pass: print(u) print(p) for u, p in user_pass: user = load_user(f'user_{u}') print(f'{u} {p}') user.set_password(p) user.save(db) # head -c 16 /dev/urandom | base64","title":"Interactive shell for flask"},{"location":"load_data/","text":"Load data TBD...","title":"Load Data"},{"location":"load_data/#load-data","text":"TBD...","title":"Load data"},{"location":"mkdocs/","text":"Mkdocs # pyenv virtualenv 3.10.4 optimeyes pyenv activate optimeyes pip install -r requirements.txt mkdocs new mkdocs_documentation cd mkdocs_documentation mkdocs serve mkdocs build mkdocs gh-deploy","title":"MKdocs"},{"location":"mkdocs/#mkdocs","text":"# pyenv virtualenv 3.10.4 optimeyes pyenv activate optimeyes pip install -r requirements.txt mkdocs new mkdocs_documentation cd mkdocs_documentation mkdocs serve mkdocs build mkdocs gh-deploy","title":"Mkdocs"},{"location":"monailabel/","text":"MonaiLabel docker compose exec -it monailabel bash monailabel start_server --app apps/monaibundle --studies datastore --conf bundles IntegrationBundle,SegformerBundle,MedSamBundle --conf zoo_source ngc Initialize MedSAM Bundle's model from huggingface: docker compose exec -it monailabel bash python from transformers import SamModel, SamProcessor import torch model = SamModel.from_pretrained(\"flaviagiammarino/medsam-vit-base\", local_files_only=False) torch.save(model.state_dict(), '/monailabel/apps/monaibundle/model/MedSamBundle/models/model.pt') torch.save(model.state_dict(), '/monailabel/apps/monaibundle/model/MedSamBundle/models/model_best.pt') # loaded_weights = torch.load('/monailabel/apps/monaibundle/model/MedSamBundle/models/model.pt', weights_only=True) # model.load_state_dict(loaded_weights)","title":"MonaiLabel"},{"location":"monailabel/#monailabel","text":"docker compose exec -it monailabel bash monailabel start_server --app apps/monaibundle --studies datastore --conf bundles IntegrationBundle,SegformerBundle,MedSamBundle --conf zoo_source ngc Initialize MedSAM Bundle's model from huggingface: docker compose exec -it monailabel bash python from transformers import SamModel, SamProcessor import torch model = SamModel.from_pretrained(\"flaviagiammarino/medsam-vit-base\", local_files_only=False) torch.save(model.state_dict(), '/monailabel/apps/monaibundle/model/MedSamBundle/models/model.pt') torch.save(model.state_dict(), '/monailabel/apps/monaibundle/model/MedSamBundle/models/model_best.pt') # loaded_weights = torch.load('/monailabel/apps/monaibundle/model/MedSamBundle/models/model.pt', weights_only=True) # model.load_state_dict(loaded_weights)","title":"MonaiLabel"},{"location":"purge_data/","text":"Purge CouchDB # DANGER sudo rm -rf /opt/couchdb/data/ sudo rm -rf /opt/couchdb/data/.delete sudo rm -rf /opt/couchdb/data/.share","title":"Purge Data"},{"location":"purge_data/#purge-couchdb","text":"# DANGER sudo rm -rf /opt/couchdb/data/ sudo rm -rf /opt/couchdb/data/.delete sudo rm -rf /opt/couchdb/data/.share","title":"Purge CouchDB"},{"location":"ssl/","text":"SSL Self signed mkdir -p flask_server/certs/ openssl req -x509 -newkey rsa:4096 -nodes -out cert.pem -keyout key.pem -days 365 mv cert.pem flask_server/certs/ mv key.pem flask_server/certs/ Echo what ever domain name you entered to /etc/hosts . Ex: optimeyes.co echo \"0.0.0.0 optimeyes.co\" | sudo tee -a /etc/hosts Certbot (real purchased certs) certbot sudo snap install --classic certbot sudo ln -s /snap/bin/certbot /usr/bin/certbot sudo certbot certonly --standalone You will get instructions on where it is on your machine. Copy to flask_server/certs folder. # When it expires in ~90 days sudo certbot renew","title":"SSL"},{"location":"ssl/#ssl","text":"","title":"SSL"},{"location":"ssl/#self-signed","text":"mkdir -p flask_server/certs/ openssl req -x509 -newkey rsa:4096 -nodes -out cert.pem -keyout key.pem -days 365 mv cert.pem flask_server/certs/ mv key.pem flask_server/certs/ Echo what ever domain name you entered to /etc/hosts . Ex: optimeyes.co echo \"0.0.0.0 optimeyes.co\" | sudo tee -a /etc/hosts","title":"Self signed"},{"location":"ssl/#certbot-real-purchased-certs","text":"certbot sudo snap install --classic certbot sudo ln -s /snap/bin/certbot /usr/bin/certbot sudo certbot certonly --standalone You will get instructions on where it is on your machine. Copy to flask_server/certs folder. # When it expires in ~90 days sudo certbot renew","title":"Certbot (real purchased certs)"}]}