{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Instructions for setup Launch git clone git@github.com:QTIM-Lab/OPTIMEyes.git cd OPTIMEyes Create an environment variables file. Do not check .env into git. cp .env_sample .env Launch Start: ./start.sh Stop: ./stop.sh Adjust CORS on Database Default CouchDB credentials: [ admin , password ] MonaiLabel monailabel","title":"Instructions for Setup"},{"location":"#instructions-for-setup","text":"","title":"Instructions for setup"},{"location":"#launch","text":"git clone git@github.com:QTIM-Lab/OPTIMEyes.git cd OPTIMEyes Create an environment variables file. Do not check .env into git. cp .env_sample .env Launch Start: ./start.sh Stop: ./stop.sh","title":"Launch"},{"location":"#adjust-cors-on-database","text":"Default CouchDB credentials: [ admin , password ]","title":"Adjust CORS on Database"},{"location":"#monailabel","text":"monailabel","title":"MonaiLabel"},{"location":"interactive_shell_for_flask/","text":"Interactive shell for flask Relaunch: docker compose up -d Logs: docker compose logs -f # everything docker compose logs -f flask docker compose logs -f couchdb docker compose logs -f monailabel # If you need to rebuild just one # docker compose build flask # docker compose build couchdb # docker compose build monailabel docker compose exec -it flask bash flask shell Download Annotations: from OPTIMEyes.routes_blueprint import downloadAnnotations App=\"monaiSegmentation\" user = 'bbearce' list_name =f'test_data-monaiSegmentation-0' task_id = f\"{user}-{list_name}\" zip_path = f\"TMP/{user}-{list_name}.zip\" downloadAnnotations(App, task_id, cli=True, zip_path=zip_path) Change Passwords: from OPTIMEyes.auth_blueprint import load_user from OPTIMEyes.db import get_server # Get the database instance couch_server = get_server() db = couch_server['image_comparator'] user = load_user('user_bbearce') user.set_password(\"password\") user.save(db) Automate it with user\\pass list: from OPTIMEyes.auth_blueprint import load_user from OPTIMEyes.db import get_server # Get the database instance couch_server = get_server() db = couch_server['image_comparator'] user = load_user('') user.set_password(\"\") user.save(db) user_pass=[ ('guest', 'testtest') ] for u, p in user_pass: print(u) print(p) for u, p in user_pass: user = load_user(f'user_{u}') print(f'{u} {p}') user.set_password(p) user.save(db) # head -c 16 /dev/urandom | base64","title":"Interactive Shell for Flask"},{"location":"interactive_shell_for_flask/#interactive-shell-for-flask","text":"Relaunch: docker compose up -d Logs: docker compose logs -f # everything docker compose logs -f flask docker compose logs -f couchdb docker compose logs -f monailabel # If you need to rebuild just one # docker compose build flask # docker compose build couchdb # docker compose build monailabel docker compose exec -it flask bash flask shell Download Annotations: from OPTIMEyes.routes_blueprint import downloadAnnotations App=\"monaiSegmentation\" user = 'bbearce' list_name =f'test_data-monaiSegmentation-0' task_id = f\"{user}-{list_name}\" zip_path = f\"TMP/{user}-{list_name}.zip\" downloadAnnotations(App, task_id, cli=True, zip_path=zip_path) Change Passwords: from OPTIMEyes.auth_blueprint import load_user from OPTIMEyes.db import get_server # Get the database instance couch_server = get_server() db = couch_server['image_comparator'] user = load_user('user_bbearce') user.set_password(\"password\") user.save(db) Automate it with user\\pass list: from OPTIMEyes.auth_blueprint import load_user from OPTIMEyes.db import get_server # Get the database instance couch_server = get_server() db = couch_server['image_comparator'] user = load_user('') user.set_password(\"\") user.save(db) user_pass=[ ('guest', 'testtest') ] for u, p in user_pass: print(u) print(p) for u, p in user_pass: user = load_user(f'user_{u}') print(f'{u} {p}') user.set_password(p) user.save(db) # head -c 16 /dev/urandom | base64","title":"Interactive shell for flask"},{"location":"load_data/","text":"Click Sign Up: Enter User Info: Go To CouchDB Main Page: http://0.0.0.0:5984/_utils CouchDB Signin: Click image_comparator DB: Find and Click Users View: Find Your User: Set Admin to True and Save: Save: Back to Main Dashboard: Navigate to Images Dashboard: Upload Test Data Set Provided: Look At Uploaded Data Set: 12 Column Grid View: 3 Column Grid View: Navigate To Tasks: Enter Task Definition: Refresh Page and Click START/CONTINUE: See Image:","title":"Load Data"},{"location":"mkdocs/","text":"Mkdocs # pyenv virtualenv 3.10.4 optimeyes pyenv activate optimeyes pip install -r flask_server/requirements.txt # mkdocs new mkdocs_documentation # already ran, don't run again for this project cd mkdocs_documentation mkdocs serve mkdocs build mkdocs gh-deploy","title":"MKdocs"},{"location":"mkdocs/#mkdocs","text":"# pyenv virtualenv 3.10.4 optimeyes pyenv activate optimeyes pip install -r flask_server/requirements.txt # mkdocs new mkdocs_documentation # already ran, don't run again for this project cd mkdocs_documentation mkdocs serve mkdocs build mkdocs gh-deploy","title":"Mkdocs"},{"location":"monailabel/","text":"MonaiLabel Download Models Initialize MedSAM Bundle's model from huggingface: docker compose exec -it monailabel bash python # start a python interpreter in monailabel container from transformers import SamModel, SamProcessor import torch MonaiLabel requires model.pt and model_best.pt in the bundle: model = SamModel.from_pretrained(\"flaviagiammarino/medsam-vit-base\", local_files_only=False) torch.save(model.state_dict(), '/monailabel/apps/monaibundle/model/MedSamBundle/models/model.pt') torch.save(model.state_dict(), '/monailabel/apps/monaibundle/model/MedSamBundle/models/model_best.pt') Loading weights if needed for custom models: # loaded_weights = torch.load('/monailabel/apps/monaibundle/model/MedSamBundle/models/model.pt', weights_only=True) # model.load_state_dict(loaded_weights) Restart MonaiLabel docker compose restart monailabel Changes to MonaiLabel and GIT If you make some edits to monailabel you need to check it into git first. cd monailabel git branch add-changes git add <file> git commit -m \"Your commit message for submodule changes\" git checkout main git merge add-changes git push origin main git branch -d add-changes cd .. git add monailabel git commit -m \"commit message\" git push","title":"MonaiLabel"},{"location":"monailabel/#monailabel","text":"","title":"MonaiLabel"},{"location":"monailabel/#download-models","text":"Initialize MedSAM Bundle's model from huggingface: docker compose exec -it monailabel bash python # start a python interpreter in monailabel container from transformers import SamModel, SamProcessor import torch MonaiLabel requires model.pt and model_best.pt in the bundle: model = SamModel.from_pretrained(\"flaviagiammarino/medsam-vit-base\", local_files_only=False) torch.save(model.state_dict(), '/monailabel/apps/monaibundle/model/MedSamBundle/models/model.pt') torch.save(model.state_dict(), '/monailabel/apps/monaibundle/model/MedSamBundle/models/model_best.pt') Loading weights if needed for custom models: # loaded_weights = torch.load('/monailabel/apps/monaibundle/model/MedSamBundle/models/model.pt', weights_only=True) # model.load_state_dict(loaded_weights)","title":"Download Models"},{"location":"monailabel/#restart-monailabel","text":"docker compose restart monailabel","title":"Restart MonaiLabel"},{"location":"monailabel/#changes-to-monailabel-and-git","text":"If you make some edits to monailabel you need to check it into git first. cd monailabel git branch add-changes git add <file> git commit -m \"Your commit message for submodule changes\" git checkout main git merge add-changes git push origin main git branch -d add-changes cd .. git add monailabel git commit -m \"commit message\" git push","title":"Changes to MonaiLabel and GIT"},{"location":"purge_data/","text":"Purge CouchDB # DANGER DB_LOCATION=./couchdb sudo rm -rf $DB_LOCATION/ sudo rm -rf $DB_LOCATION/.delete sudo rm -rf $DB_LOCATION/.share","title":"Purge Data"},{"location":"purge_data/#purge-couchdb","text":"# DANGER DB_LOCATION=./couchdb sudo rm -rf $DB_LOCATION/ sudo rm -rf $DB_LOCATION/.delete sudo rm -rf $DB_LOCATION/.share","title":"Purge CouchDB"},{"location":"ssl/","text":"SSL Self signed mkdir -p flask_server/certs/ openssl req -x509 -newkey rsa:4096 -nodes -out cert.pem -keyout key.pem -days 365 mv cert.pem flask_server/certs/ mv key.pem flask_server/certs/ Echo what ever domain name you entered to /etc/hosts . Ex: optimeyes.co echo \"0.0.0.0 optimeyes.co\" | sudo tee -a /etc/hosts Certbot (real purchased certs) certbot sudo snap install --classic certbot sudo ln -s /snap/bin/certbot /usr/bin/certbot sudo certbot certonly --standalone You will get instructions on where it is on your machine. Copy to flask_server/certs folder. When it expires in ~90 days: sudo certbot renew","title":"SSL"},{"location":"ssl/#ssl","text":"","title":"SSL"},{"location":"ssl/#self-signed","text":"mkdir -p flask_server/certs/ openssl req -x509 -newkey rsa:4096 -nodes -out cert.pem -keyout key.pem -days 365 mv cert.pem flask_server/certs/ mv key.pem flask_server/certs/ Echo what ever domain name you entered to /etc/hosts . Ex: optimeyes.co echo \"0.0.0.0 optimeyes.co\" | sudo tee -a /etc/hosts","title":"Self signed"},{"location":"ssl/#certbot-real-purchased-certs","text":"certbot sudo snap install --classic certbot sudo ln -s /snap/bin/certbot /usr/bin/certbot sudo certbot certonly --standalone You will get instructions on where it is on your machine. Copy to flask_server/certs folder. When it expires in ~90 days: sudo certbot renew","title":"Certbot (real purchased certs)"},{"location":"use/","text":"Use OPTIMEyes Open Source Ophthalmology Annotation App QTIM GitHub. Signup Login MonaiLabel Classify Compare Flicker Slider","title":"Use"},{"location":"use/#use-optimeyes","text":"Open Source Ophthalmology Annotation App QTIM GitHub.","title":"Use OPTIMEyes"},{"location":"use/#signup","text":"","title":"Signup"},{"location":"use/#login","text":"","title":"Login"},{"location":"use/#monailabel","text":"","title":"MonaiLabel"},{"location":"use/#classify","text":"","title":"Classify"},{"location":"use/#compare","text":"","title":"Compare"},{"location":"use/#flicker","text":"","title":"Flicker"},{"location":"use/#slider","text":"","title":"Slider"}]}